# Leak suppressions for Ice below are all for bogus "possibly lost" reports.
# In all cases, we ultimately end up in the std::string library, which does
# weird things with pointers that point somewhere into the middle of an allocated
# block to avoid copies. In turn, that causes bogus reports from valgrind.

{
    Ice::initialize
    Memcheck:Leak
    ...
    fun:_ZN3Ice10initializeERKNS_18InitializationDataEi
    ...
}

{
    Ice::Properties::load
    Memcheck:Leak
    ...
    fun:_ZN3Ice11PropertiesI4loadERKSs
    ...
}

{
    Ice::DefaultsAndOverrides
    Memcheck:Leak
    fun:_Znwm
    ...
    fun:_ZNSsC1EPKcRKSaIcE
    ...
}

{
    Ice::unescapeString
    Memcheck:Leak
    fun:_Znwm
    fun:_ZNSs4_Rep9_S_createEmmRKSaIcE
    fun:_ZNSs4_Rep8_M_cloneERKSaIcEm
    fun:_ZNSs7reserveEm
    fun:_ZN15IceUtilInternal14unescapeStringERKSsmm
    ...
}

{
    Ice::setProperty
    Memcheck:Leak
    fun:_Znwm
    fun:_ZNSs4_Rep9_S_createEmmRKSaIcE
    fun:_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag
    fun:_ZNSsC1ERKSsmm
    fun:_ZN15IceUtilInternal4trimERKSs
    fun:_ZN3Ice11PropertiesI11setPropertyERKSsS2_
}

{
    Ice::ThreadPool
    Memcheck:Leak
    fun:_Znwm
    ...
    fun:_ZN11IceInternal10ThreadPool12nextThreadIdEv
}

{
    Ice::EndpointFactoryManager
    Memcheck:Leak
    ...
    fun:_ZNK11IceInternal22EndpointFactoryManager6createERKSsb
}

# Bogus "possibly leaked" reports for pthreads

{
    Thread create leak
    Memcheck:Leak
    fun:calloc
    fun:_dl_allocate_tls
    fun:pthread_create@@GLIBC_2.2.5
    ...
}

# Bogus "possibly leaked" reports for glib .ini file parser

{
    g_keyfile_new_leak
    Memcheck:Leak
    ...
    fun:g_key_file_new
    ...
}

{
    g_keyfile_load_leak
    Memcheck:Leak
    ...
    fun:g_key_file_load_from_file
    ...
}

# Bogus "possibly lost" report for
#
#   string s("hello");
#   foo(s + " world");

{
    StringCatenation
    Memcheck:Leak
    fun:_Znwm
    fun:_ZNSs4_Rep9_S_createEmmRKSaIcE
    fun:_ZNSs4_Rep8_M_cloneERKSaIcEm
    fun:_ZNSs7reserveEm
    fun:_ZNSs6appendEPKcm
    ...
}

# False positives for memory leaks in Qt

{
   QNetworkConfigurationManagerInit
   Memcheck:Leak
   fun:*alloc
   ...
   fun:_ZN35QNetworkConfigurationManagerPrivate20updateConfigurationsEv
   fun:_ZN35QNetworkConfigurationManagerPrivate10initializeEv
}

{
   QCoreApplicationNotifyRealloc
   Memcheck:Leak
   fun:realloc
   ...
   fun:_ZN7QObject5eventEP6QEvent
   fun:_ZN16QCoreApplication6notifyEP7QObjectP6QEvent
}

